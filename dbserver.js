
function formatBuf(b){
	var x = "";
	for(var i=0; i<b.length; ){
		x += b.slice(i,i+1).toString('hex');
		if(++i==b.length) break;
		else if(i%16==0){
			x+="   ";
			for(var j=16; j>0; j--) x += (b[i-j]>=0x20&&b[i-j]<0x80) ? String.fromCharCode(b[i-j]) : '.';
			x+="\n";
		}
		else if(i%8==0) x+="  ";
		else x+=" ";
	}
	return x+"\n";
}

function Item22(r){
	return new Buffer([
		0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
		r[0], r[1], 0x10, 0x22, // to be completed
	]);
}

function Item40(r, aaa0, aaaa, bbbb, len){
	var len0 = len>>8;
	var len1 = len & 0xff;
	return new Buffer([
		0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
		r[0], r[1], 0x10, 0x40, aaa0, 0x0f, 0x02, 0x14,
		0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x11, 0x00, 0x00, aaaa, bbbb, 0x11, 0x00, 0x00,
		len0, len1,
	]);
}

var SYMX = 0x24;
function Item41(r, aaaa, bbbb, numeric, dddd, label, eeee, symbol){
	// 00 = nothing
	// 01 = folder
	// 02 = disc (album title)
	// 03 = disc (same as above?)
	// 04 = music note (track title)
	// 05 = music note (same as above?)
	// 06 = disc in folder
	// 07 = person
	// 08 = stack of something
	// 09 = stack of something
	// 0a = 1/5 stars (numeric)
	// 0b = duration (numeric)
	// 0c = Eighth note with "C" (string)
	// 0d = BPM (numeric)
	// 0e = disc inside sleeve?
	// 0f = key: sharp/flat icon (string)
	// 10 = bps (numeric)
	// 11 = pie and calendar (numeric)
	// 12 = file (string)
	// 13 = circle
	// 14 = magenta circle
	// 15 = red circle
	// 16 = orange circle
	// 17 = yellow circle
	// 18 = green circle
	// 19 = cyan circle
	// 1a = blue circle
	// 1b = violet circle
	// 1c = circle
	// 1d =
	// 1e =
	// 1f =
	// 20 = circle
	// 24 = stack of stuff
	// 28 = person with star head
	// 30 = eighth note with "H"
	// 31 = red H-check hot cue (string)
	// 32 = plain H-check
	// 33 = orange flat-sharp symbol
	// 34 = green flat-sharp
	// 35 = nothing
	// ef = nothing
	// ff = nothing
	var symb = symbol;
	var ccc0 = (numeric>>8) & 0xff;
	var ccc1 = (numeric>>0) & 0xff;
	var nnn0 = (label.length+1) >> 8;
	var nnn1 = (label.length+1) & 0xff;
	var buf = new Buffer(0x60+label.length*2);
	buf.fill();
	var tpl = new Buffer([
		0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
		r[0], r[1], 0x10, 0x41, aaaa, 0x0f, bbbb, 0x14,
		0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x06, 0x02,
		0x06, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
		0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
		ccc0, ccc1, 0x11, 0x00, 0x00, 0x00, dddd, 0x26,
		0x00, 0x00, nnn0, nnn1, 0x00, 0x00, 0x11, 0x00,
		0x00, 0x00, 0x02, eeee, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x11, 0x00, 0x00, 0x00, symb, 0x11,
		0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
		0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
		0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,
	]);
	tpl.copy(buf, 0, 0, 0x34);
	for(var i=0; i<label.length; i++) buf.writeUInt16BE(label.charCodeAt(i)||0, 0x34+i*2);
	tpl.copy(buf, 0x34+label.length*2, 0x34, tpl.length);
	return buf;
}

function handleDBServerConnection(device, socket) {
	console.log('NEW CONNECTION '+socket.localPort);
	var state = socket.state = {};
	state.length = 0;
	state.initialized = 0;
	state.buffer = new Buffer(0); // Hold onto packets while they're incomplete
	socket.on('data', function(newdata) {
		state.length += newdata.length;
		var data = state.buffer.length ? state.buffer.concat(newdata) : newdata;
		// The first packet that comes in on the connection always seems to be the handshake:
		// the same five bytes in both directions, client first
		var magic_handshake = new Buffer([0x11, 0x00, 0x00, 0x00, 0x01]);
		if(state.initialized===0){
			if(data.compare(magic_handshake)!=0){
				console.error(magic_handshake);
				console.error(data);
				throw new Error('Connection init handshake: Invalid handshake');
			}
			console.log('< DBServer handshake');
			// This 'Hello' always seems to be the same five bytes, in both directions: 0x11.00.00.00.01
			socket.write(magic_handshake);
			state.initialized = 1;
			return;
		}
		// The second packet that comes in seems to be this "hello" packet, the same 0x2a bytes except for the last one
		var incoming_hello = new Buffer([ 0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0xff, 0xff ]);
		if(data.slice(0,8).compare(incoming_hello)==0){
			var incoming_hello_chan = data[0x24];
			console.log('< hello chan='+incoming_hello_chan);
			var chan = device.channel;
			var response_hello = new Buffer([
				0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0xff, 0xff,
				0xff, 0xfe, 0x10, 0x40, 0x00, 0x0f, 0x02, 0x14,
				0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
				0x00, chan ]);
			socket.write(response_hello);
			return;
		}
		// All of the other requests follow this magic pattern
		var magic_header = new Buffer([0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80]);
		if(data.slice(0,8).compare(magic_header)!=0){
			console.error(magic_header);
			console.error(data);
			throw new Error('Invalid magic header');
		}
		var r = data.slice(0x8, 0x8+2); // Request ID
		var type = data[0xb]; // seems to be 0x{10,20,30,40,41,42}
		console.log('DBServer x'+type.toString(16));
		console.log(formatBuf(data));
		// A packet like this is sent out just before every 'primary' request that will return the actual track data
		// Who knows what it does?
		//	0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80, 0xNN, 0xNN, 0x10, 0xWW, 0x02, 0x0f, 0x02, 0x14,
		//	0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		//	0x11, 0x03, 0x01, 0xXX, 0xYY, 0x11, 0x00, 0x00, 0x00, 0xZZ, ]);
		if(type==0x10){
			console.log('< DBServer prerequest');
			var leng = 1000; // Number of menu items there will be, plus one (maybe)
			var response_prerequest = Item40(r, 0x00, data[0x0b], 0x02, leng);
			socket.write(response_prerequest);
			return;
		}
		if(type==0x30){
			console.log('< DBServer main-request');
			var item0 = Item40(r, 1, 0, 1, 0);
			var item1 = Item41(r, 1, 0x0c, 0x01, 0x10, "ABCDEFG", 0x26, 0x04);
			var item2 = Item41(r, 1, 0x0c, 0x01, 0x4c, "Armin van Buuren feat. Eric Vloeimans", 0x26, 0x07);
			var item3 = Item41(r, 1, 0x0c, 0x01, 0x4c, "Embrace", 0x26, 0x02);
			var item4 = Item41(r, 1, 0x0c, 9001, 0x02, "", 0x26, 0x0b);
			var response_request = new Buffer([
				0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
				r[0], r[1], 0x10, 0x41, 0x01, 0x0f, 0x0c, 0x14,
				0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x06, 0x02,
				0x06, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
				0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
				0x01, 0xc8, 0x11, 0x00, 0x00, 0x00, 0x02, 0x26,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x02, 0x26, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0b, 0x11,
				0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
				0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,

				0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
				r[0], r[1], 0x10, 0x41, 0x01, 0x0f, 0x0c, 0x14,
				0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x06, 0x02,
				0x06, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
				0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
				0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x02, 0x26,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x02, 0x26, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0d, 0x11,
				0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
				0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,

				0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
				r[0], r[1], 0x10, 0x41, 0x01, 0x0f, 0x0c, 0x14,
				0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x06, 0x02,
				0x06, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
				0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
				0x00, 0x01, 0x11, 0x00, 0x00, 0x00, 0x02, 0x26,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x02, 0x26, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x23, 0x11,
				0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
				0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,

				0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
				r[0], r[1], 0x10, 0x41, 0x01, 0x0f, 0x0c, 0x14,
				0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x06, 0x02,
				0x06, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
				0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
				0x00, 0x01, 0x11, 0x00, 0x00, 0x00, 0x02, 0x26,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x02, 0x26, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x06, 0x11,
				0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
				0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,

				0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
				r[0], r[1], 0x10, 0x41, 0x01, 0x0f, 0x0c, 0x14,
				0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x06, 0x02,
				0x06, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
				0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0xff, 0xff,
				0xff, 0xff, 0x11, 0x00, 0x00, 0x00, 0x02, 0x26,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x02, 0x26, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0a, 0x11,
				0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
				0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,

				0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
				r[0], r[1], 0x10, 0x41, 0x01, 0x0f, 0x0c, 0x14,
				0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x06, 0x02,
				0x06, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
				0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
				0x00, 0xff, 0x11, 0x00, 0x00, 0x00, 0x02, 0x26,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x02, 0x26, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x13, 0x11,
				0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
				0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,

				0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
				r[0], r[1], 0x10, 0x41, 0x01, 0x0f, 0x0c, 0x14,
				0x00, 0x00, 0x00, 0x0c, 0x06, 0x06, 0x06, 0x02,
				0x06, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
				0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0xff, 0xff,
				0xff, 0xff, 0x11, 0x00, 0x00, 0x00, 0x02, 0x26,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x02, 0x26, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x10, 0x11,
				0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
				0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,

				0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80,
				r[0], r[1], 0x10, 0x42, 0x01, 0x0f, 0x00, 0x14,
				0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				]);
			console.log('Computed/actual');
			console.log(item4.length);
			console.log(formatBuf(item4));
			console.log(formatBuf(response_request.slice(0, item4.length+2)));
			item4.copy(response_request);
			socket.write(Buffer.concat([
				item0,
				item1,
				item2,
				item3,
				response_request,
			]));
			return;
		}
		// Now let's try and figure out how to respond to a request for "Browse"
		// Included in the response seems to be:
		// - The first six or so menu items - only the ones being displayed
		// - The total number of menu items that can be scrolled through
		// - The fancy square brackets seem to be U+FFFA and U+FFFB
		// Album art and contents of submenus (that may be previewed) is acquired through a separate request
		// Responses are variable length, but where is the length field (if any)
		// Menu entries seem to be variable-length
		// - "ARTIST" (6) - 9
		// - "ALBUM" (5) - 8
		// - "TRACK" (5) - 8
		// - "KEY" (3) - 6
		// - "PLAYLIST" (8) - b
		// - "HISTORY" (7) - a
		// If we do this sequence:
		// 1. Boot up Rekordbox
		// 2. Press "Rekordbox" button and pull up browse
		// 3. Press "Link" on Rekordbox
		// Then we see the following requests go over the wire:
		// 1. 5-byte handshake
		// 2. [11 87 23 49 ae 11 ff ff  ff fe 10 00 00 0f 01 14] that seems to contain the sender's channel number, and is responded with the server's channel number
		// 3. [11 87 23 49 ae 11 03 80  nn nn 10 40 00 0f 02 14] that preceeds a menu request
		// 4. [11 87 23 49 ae 11 03 80  nn nn 10 30 00 0f 06 14] that is the actual request, responds with 6 menu items
		// 5. [11 87 23 49 ae 11 03 80  nn nn 10 10 02 0f 02 14] that preceeds a menu request
		// 6. [11 87 23 49 ae 11 03 80  nn nn 10 30 00 0f 06 14] that is the actual request for the "ARTIST" submenu
		throw new Error('Unknown incoming data/request '+type.toString(16));
	});
	socket.on('end', function() {
		console.log('Connection closed');
	});
	// start the flow of data, discarding it.
	socket.resume();
}

module.exports.handleDBServerConnection = handleDBServerConnection;

function DBServer(){
	// So what now?
}

// Eight bytes magic
DBServer.magic = [0x11, 0x87, 0x23, 0x49, 0xae, 0x11, 0x03, 0x80];
// Then two bytes request id
// Byte 0x10
// Byte message type
// Remainder packet body?


